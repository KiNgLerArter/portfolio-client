@use "sass:map";
@import "~@angular/material/theming";
@import "colors";

@mixin theme-color-grabber($theme) {
  // Parse the theme and create variables for each color in the pallet
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $warn: map.get($theme, warn);

  // Create theme specific styles
  .bg--primary {
    background-color: mat-color($primary, default);
  }
  .bg--accent {
    background-color: mat-color($accent, default);
  }
  .bg--warn {
    background-color: mat-color($warn, default);
  }

  .c--primary {
    color: mat-color($primary, default);
  }
  .c--accent {
    color: mat-color($accent, default);
  }
  .c--warn {
    color: mat-color($warn, default);
  }

  @each $shade in $shades {
    // --app-primary-#{$shade}: rgba(mat-color($primary, default), $shade/100);
    // --app-accent-#{$shade}: rgba(mat-color($accent, default), $shade/100);
    // --app-warn-#{$shade}: rgba(mat-color($warn, default), $shade/100);

    .bg--primary-#{$shade} {
      background-color: rgba(
        mat-color($primary, default),
        $shade/100
      ) !important;
    }
    .bg--accent-#{$shade} {
      background-color: rgba(
        mat-color($accent, default),
        $shade/100
      ) !important;
    }
    .bg--warn-#{$shade} {
      background-color: rgba(mat-color($warn, default), $shade/100) !important;
    }

    .c--primary-#{$shade} {
      color: rgba(mat-color($primary, default), $shade/100) !important;
    }
    .c--accent-#{$shade} {
      color: rgba(mat-color($accent, default), $shade/100) !important;
    }
    .c--warn-#{$shade} {
      color: rgba(mat-color($warn, default), $shade/100) !important;
    }
  }
}
